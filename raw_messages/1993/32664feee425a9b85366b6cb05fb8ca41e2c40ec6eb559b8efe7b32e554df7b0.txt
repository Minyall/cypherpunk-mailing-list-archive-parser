From: jim@bilbo.suite.com (Jim Miller)
Date: Mon, 29 Nov 93 17:22:05 PST
To: cypherpunks@toad.com
Subject: really hiding encrypted data
Message-ID: <9311300120.AA12755@bilbo.suite.com>
MIME-Version: 1.0
Content-Type: text/plain



Let's imaging that the government has made it illegal to encrypt data unless  
you use an "approved" crypto-system.

In a world like this, a person who wanted to encrypt data would have to find a  
way to hide the encrypted data.  Many people have suggested placing the  
encrypted data in the least significant bit of a binary picture file.  However,  
I suspect it is easy to distinguish between the collection of least significant  
bits of a normal picture file and the collection of least significant bits of a  
picture file used to hold some encrypted data.  In other words,  your picture  
file envelope could trigger an alarm in some government traffic sniffer.

This is probably a stupid question, but...is there anyway to take a chuck of  
encrypted data (presumably with a high degree of randomness) and securely munge  
it so it looks less random, while retaining the ability to reverse the munge  
and decrypt the data.

Ideally, the munge process should not be based on obscurity.  The munge process  
should be a keyed algorithm so the government filters can't systematically  
"unmunge" to check for highly random (and suspect) data.

Unfortunately, I have a hard time imagining an algorithm that is secure AND  
produces an output that isn't highly random.
 

Any ideas?   How about something fractal?  <arg!  I can't believe I said the  
"f" word>   The "munge key" could be the initial state of the fractal engine.   
<shrug>  I really don't have a clue about the randomness of the output of a  
fractal engine.

 

 Jim_Miller@suite.com
 

 




