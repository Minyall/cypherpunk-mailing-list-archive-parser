From: doug@netcom.com (Doug Merritt)
Date: Fri, 5 Nov 93 09:17:45 PST
To: cypherpunks@toad.com
Subject: Re: trusting software
Message-ID: <199311051714.JAA21715@mail.netcom.com>
MIME-Version: 1.0
Content-Type: text/plain


greg@ideath.goldenbear.com (Greg Broiles) said:
>It's not clear to me how you can trust systems not under your control to 
>report on themselves or local conditions accurately. As your program gets 
>more complex, aren't you going to run into an analog of the Turing 
>machine/halting problem?

The idea is to encode the important-to-be-trusted features of the software
and the inter-machine protocol handshake together into the equivalent
of a Goedel number which acts as a public key during the protocol handshake,
so that any change to that core encoding of the functionality would have
the side effect that it was no longer able to communicate.

>It's an intriguing idea, but it's still very unclear to me how it might 
>work on software of any real complexity.

Yeah...I'm having strong difficulties with doing it in a way that is
computationally feasible as well as theoretically sound. Several times
I thought I'd found the right approach but then found holes in it. So
I lied in implying that I really did have a final algorithm....I *thought*
I did, but I was wrong.
	Doug




