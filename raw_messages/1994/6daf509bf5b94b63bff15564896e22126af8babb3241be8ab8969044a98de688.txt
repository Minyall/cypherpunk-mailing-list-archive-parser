From: dat@ebt.com (David Taffs)
Date: Sat, 23 Apr 94 14:32:21 PDT
To: tcmay@netcom.com
Subject: Re: T-Shirts, Neil Young, Asilomar, and Smalltalk
In-Reply-To: <199404232013.NAA11582@mail.netcom.com>
Message-ID: <9404232131.AA01505@helpmann.ebt.com>
MIME-Version: 1.0
Content-Type: text/plain



   From: tcmay@netcom.com (Timothy C. May)
   Subject: T-Shirts, Neil Young, Asilomar, and Smalltalk
   Date: Sat, 23 Apr 1994 13:13:00 -0700 (PDT)

Thanks for the great message. I hope I don't start (too much of) a
flame war about these religious issues...

   ...

   I did give a 25-minute talk on "Implications of Cryptography," which
   generated some good discussion. I also cemented some thoughts in
   discussion with Bernard Peuto and Ted Kaehler about the need for a
   deeper analysis of the old computer science work on "mutually
   suspicious cooperating agents," which was predicted to be a Big Thing
   for computer science (along with objects, segmented logical address
   spaces, and several other such Good Ideas), but which faded out when C
   and flat, Unix-style address spaces came to the fore.

You might want to check out research about "the Byzantine Generals
problem", e.g. in ACM's TOPLAS, including (I believe) stuff about
synchronizing distributed mutually-suspicious clocks. As I understand
it, many these problems have been generally solved in theory, and are
just waiting for demand and resources to be put in practice. There is
room for more work, of course.

Objects are Great; C++ (using objects, in I believe the way you mean)
is clearly the language of choice for the virtually the entire
(commercial) programming industry. At least this is for software; if
you are talking about hardware support (e.g. segmented address spaces,
such as the i432) this was always dubious, because in general it is
always better (when possible and adequately efficient) to do something
at "compile time" than "run time" (for example, proving that resources
are protected, by ensuring that given protocols are followed).

So I think Objects are a Good Idea, but I think Segmented Logical Address
Spaces are in principal Less Good (within reason) than a Single Large
Address Space (equivalent in size, within reason) with compile-time
"proofs" of non-interference.

Of course, multiple process address spaces also absorb the functionality
provided by Segmented Logical Address Spaces, and so the Client-Server
model now being hyped immoderately is sort of an implementation of the
Same Thing.

   ...

   Food for thought. I'm wondering if a project to implement a kind of
   "Digital Money World," perhaps in SmalltalkAgents, wouldn't be an
   interesting project. (Many will probably tell me that a collection of
   Perl scripts would be more "portable" and more useful to the current
   Unixcentric community....something I'd like to see more discussion
   of.)

I suspect the framework of choice would be some sort of MOO or MUD. Of
course, once it hit production status, then transliteration into Perl
install scripts would be appropriate.

   Exciting times.

You bet -- it sure is interesting to be alive in these "latter days".
As his ex-Prince-ness has said: "We're gonna party like it's 1999".

Of course, we'd better get strong crypto distributed before the Second
Coming -- you think the current US government is involved in a power
grab, you just wait!!! This new government will really know how to
take care of non-conformists -- Waco is nothing compared to what they
are planning (read: fiery brimstone)...

I wonder if Jesus can create a number so large he can't factor it?

   --Tim May

Pardon my excursion into various religious topics -- arguably this
list is also about religion ("religion is what you do" -- "cypherpunks
write code" -- belief that strong crypto should be widely distributed
is certainly a religious tenet for some on this list). I hope I
haven't offended anybody important...



Important UnSeminated Encouragement of this DisInformation Alteration
is Distributed.


-- 
dat@ebt.com (David Taffs)



