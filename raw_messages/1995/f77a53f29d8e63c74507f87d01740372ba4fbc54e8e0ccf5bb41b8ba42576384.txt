From: Piete Brooks <Piete.Brooks@cl.cam.ac.uk>
Date: Fri, 25 Aug 95 05:04:35 PDT
To: fc@all.net (Dr. Frederick B. Cohen)
Subject: Re: improving the distributed computation
In-Reply-To: <9508251143.AA15702@all.net>
Message-ID: <"swan.cl.cam.:252910:950825120349"@cl.cam.ac.uk>
MIME-Version: 1.0
Content-Type: text/plain


> 1) Abandon the central command way of doing things.  Little if any
> communication is required for this computation, it should be
> self-distributing to and between volenteer sites.  That makes it ideal
> for implementation as a safe virus. 

I need some hints as to what the above means, but combined with (3) it becomes 
trivial ...

> 2) Give these computations a defined and limited lifetime.  The problem
> you have with old versions is because they don't die automatically or
> even check to see if they are up-to-date and update themselves.

You want self updating code running on *your* system ???

What do you mean by "safe virus" ??

> 3) Use randomness to break up the search space and redundantly perform
> the computation.  This should eliminate the problems with malicious
> key-space requests, etc.

If you take this step, you can chuck SKSP altogether.
All that is needed is some way to tell the virus to stop when teh answer has 
been found -- or would you not bother with that ?

If random searching were permitted, that would indeed be the way to go.

> 4) Use feedback in the form of selective survival/replication to
> optimize the search and allocate search space.  If a processor goes
> quickly, give it more to do - if it goes slowly, give it less.

I'm lost -- if thee search is random, you kusst let it run !

> This will produce an overall system that adapts with time to the cahges in
> network and system usage so as to optimize overall performance as a
> function of time.

Eh ?

With random searching you just run it on all machines you can !
No adaptation, jusst brute CPU cycles ....


Have I missed something ??




