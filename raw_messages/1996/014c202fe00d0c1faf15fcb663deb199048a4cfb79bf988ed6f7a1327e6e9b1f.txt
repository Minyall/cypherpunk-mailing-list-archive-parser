From: The Deviant <deviant@pooh-corner.com>
Date: Wed, 24 Jul 1996 18:28:12 +0800
To: Mike Duvos <mpd@netcom.com>
Subject: Re: Brute-forcing DES
In-Reply-To: <199607230633.XAA19801@netcom20.netcom.com>
Message-ID: <Pine.LNX.3.94.960724054322.1558A-100000@switch.sp.org>
MIME-Version: 1.0
Content-Type: text/plain


-----BEGIN PGP SIGNED MESSAGE-----

On Mon, 22 Jul 1996, Mike Duvos wrote:

> Date: Mon, 22 Jul 1996 23:33:58 -0700 (PDT)
> From: Mike Duvos <mpd@netcom.com>
> To: cypherpunks@toad.com
> Subject: Re: Brute-forcing DES
> 
> "Peter Trei" <trei@process.com> writes:
> 
>  > Sadly, after further calculation, I'm not so sure if it's
>  > doable just yet.
> 
> ....
> 
>  > The fastest general purpose, freely available des
>  > implementation I'm aware of is libdes. by Eric Young. With
>  > this, I can do a set_key in 15.8 us, and an ecb_encrypt in
>  > 95 us/block. That adds up to about 9,000 keytests/sec (this
>  > is on a 90 MHz P5, running NT).
> 
> What you really want to do to sweep the DES keyspace is to
> "schedule" the input and output block you are testing, performing
> any static operations, and do only enough computation to see that
> a given key fails.  Special purpose assembler to do this
> particular function would probably run faster than any algorithm
> which could also be employed to encrypt data.
> 
>  > What will make this brute doable, if not now, then in the
>  > near future?
> 
>  > 1. Faster Processors
> 
>  > 2. More processors.
> 
>  > 3. More interest
> 
> 4. Better code.
> 

We also need to address the question of the code itself.  Just crypting it
won't work.  We need a good way to test _to see if we have an answer_, for
a non-known plaintext attack.

 --Deviant
Whatever occurs from love is always beyond good and evil.
		-- Friedrich Nietzsche


-----BEGIN PGP SIGNATURE-----
Version: 2.6.2

iQEVAwUBMfW4+DAJap8fyDMVAQECmAf+Le7kpXqvGDOSMhRdUG6qluP/RkBE9oeR
1O0pmeHPHtMU1qAgL1c9YJ3fHAdb+naLIhff1x8K2Nt4LsVYiNHY1va3ogg3P6mx
G/1N+4iOtsL49XXhO+YnJfHxd8fYAdQKftWwcQc9DOpUbvHoD/yWIS94YHHnH6Zn
Uly5cQqKtpNh20uq5gCC6GcJWj+Dm6BjaKrYuUgSwBNrnYBSQ6nui7W26zawA4vh
GHtxKWIJQ9onBYWM025YuYhzTpRy852aLZifw1xPtAXXe1TypjcRojXcTtBL0iK0
oWVbtRWwxqKlzhmOiktec75jWjduREBoMve4OCE/3G0obILS84qxhA==
=f9OL
-----END PGP SIGNATURE-----





