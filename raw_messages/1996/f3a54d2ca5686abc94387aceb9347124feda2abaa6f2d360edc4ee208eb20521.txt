From: bryce@digicash.com
Date: Sun, 12 May 1996 11:02:48 +0800
To: perry@piermont.com
Subject: found nym-differentiation!  Still need perpetual motion, FTL travel, cold fusion
In-Reply-To: <199605111942.PAA07516@jekyll.piermont.com>
Message-ID: <199605112023.WAA08121@digicash.com>
MIME-Version: 1.0
Content-Type: text/plain



-----BEGIN PGP SIGNED MESSAGE-----

- -----BEGIN PGP SIGNED MESSAGE-----

 The entity calling itself "Perry Metzger"
 <perry@piermont.com> is alleged to have written:

> bryce@digicash.com writes:
> > Okay having said I couldn't think of a good way, I'll go
> > ahead and suggest a way.
> > 
> > Let's assume that it is possible to stop people from
> > pretending to be anyone in Real Life(tm).  (It is possible.)
> 
> How? Identity police taking genetic samples from every person on the
> planet six times a day?


Sure: genetic samples and biometric ID in general, collected
by identity police, by "IsAPerson" credential-distribution
organizations, and by your friends and family who hang out
with you all the time.


This prevents, for example, me from pretending to be Arnaud
Sahuguet when I'm talking to Berry Schoenmakers, since
Berry has gathered a lot of biometric information about
Arnaud and about me, such as how we look, sound and (?)
smell.


That kind of impersonation-prevention within a given set of
people is all I need to bootstrap my cool nyms-without-
doublenyms system described below.


(As an aside Berry can also differentiate Arnaud from me by
non-biometric information like the fact that Arnaud speaks
better French than I do.  On the net, however, it is easier
to pretend to speak French.)


> > Now let's collect N people and form a Dining-Cryptographers'
> > net.  Once the Dining-Cryptographers' net is up-and-running
> > let's put out a call for each of the N participants to
> > announce a public key which will be their nym from now on.
> > Assuming that you get N public keys, you can have _some_
> > degree of assurance that there is a one-to-one mapping
> > between pubkeys/nyms and humans on the DC-Net.
> 
> And how do you catch the person who tries to send out two keys?


Simple as pie, because of some of the properties of DC-Nets.
If someone sends out the wrong number of pubkeys, then
everyone will know, right?  So when that happens everyone
just reveals their shared-secret data from the DC-Net
session.  This makes everything that happened during that
session public.  The disruptor is kicked out of the nym club
and we back up a step and generate new pubkeys for
ourselves.


I'm getting rather interested in DC-Nets.  I don't suppose
anyone has gone ahead and invented a protocol for DC-Net
conversations?  It is a _really_ interesting problem,
because of the strange requirements of DC-Nets (such as
having denial-of-service prevention in the networking
layer, and the fact that it is shared-media even up at
the network layer) and because of their efficiency 
(/scaleability) problems.


Regards,

Bryce




- -----BEGIN PGP SIGNATURE-----
Version: 2.6.2i
Comment: Auto-signed under Unix with 'BAP' Easy-PGP v1.1b2

iQB1AwUBMZT2+EjbHy8sKZitAQHOtQL8CFAwvqo3H8+jKGdjeqi7tgjMUyWaYBoA
rBzj4vF9VisC2a7Q/bM4iwQD8mahz1EDidhcncWqTxAWXv+vq/Wf3Yhdy7Kb+168
4AuNLpFHLQRhu+0ijuWB77oiKb7jHHk2
=q/v1
- -----END PGP SIGNATURE-----

-----BEGIN PGP SIGNATURE-----
Version: 2.6.2i
Comment: Auto-signed under Unix with 'BAP' Easy-PGP v1.1b2

iQB1AwUBMZT3J0jbHy8sKZitAQGrDgL9H1Z8QGNlPB6/thmGxSLu/Tna86aG1/WT
/tuGUK4vGAqMAR7M2freIgsqC3iQFO4nHqXzPyT46OJZlpJAUS4zzaE9gvgX7V/T
fn9eo75v9HfPRo6eY9VTh/gQP1PdW3gK
=zEyz
-----END PGP SIGNATURE-----




